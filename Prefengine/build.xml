<?xml version="1.0" encoding="UTF-8"?>
<!--  Prefengine build file 
  Requires environment variables MYSQL_USER, MYSQL_PW, MYSQL_SITE
  Requires database tables set up: use build.xml in subdirectory database.
-->
<project name="prefengine" default="build" basedir=".">
	<!-- Global properties for this build -->
	<property environment="env" />
	<property name="database.dir" value="database" />
	<property name="src.dir" value="src" />
	<!--Added due to issues with easily setting up -Yinka -->
	<property name="webinf.dir" value="WebContent/WEB-INF" />
	<!-- Note new location of classes, even in client-server case-->
	<property name="classes.dir" value="${webinf.dir}/classes" />
	<!-- the main set of jars is set that is deployed with the web app -->
	<property name="lib.dir" value="${webinf.dir}/lib" />
	
	
	
	<!-- Global properties for this build -->
	<property environment="env" />
	<!-- on PC, maybe c:\tomcat-8.0 -->
	<property name="CATALINA_HOME" value="${env.CATALINA_HOME}" />
	<!-- on PC, http://localhost:8080-->
	<property name="TOMCAT_URL" value="${env.TOMCAT_URL}" />
	<property name="deploy.dir" value="${CATALINA_HOME}/webapps/${ant.project.name}" />

	<property name="database.dir" value="database" />
	<property name="src.dir" value="src" />
	<property name="webinf.dir" value="WebContent/WEB-INF" />
	<!-- Note new location of classes, even in client-server case-->
	<property name="classes.dir" value="${webinf.dir}/classes" />
	<!-- the main set of jars is set that is deployed with the web app -->
	<property name="lib.dir" value="${webinf.dir}/lib" />
	<!-- lib has jars needed only for clientserver case, add-ons to main set,
	     which includes all the driver jars.  Note that we do not need to *deploy* 
	     (i.e., install with the web app) the driver jars, because they
	      are not directly used in the web app case. Instead, we need to
	      make sure they are in tomcat's lib dir, so tomcat can create the needed
	      Datasource objects. The preconfigured tomcat has the needed driver jars.
	   -->
	<property name="clientserver-lib.dir" value="lib" />
	<property name="MYSQL_URL" value = "jdbc:mysql://${env.MYSQL_SITE}/prefengine"/>
	<property name="JAVAAGENT" value="-javaagent:${lib.dir}/eclipselink.jar" />
	
	<!-- Classpath declaration: all jars in lib -->
	<path id="project.classpath">
		<pathelement location="${classes.dir}" />
		<fileset dir="${lib.dir}">
			<include name="**/*.jar" />
		</fileset>
	</path>
	
	<target name="init">
		<mkdir dir="${classes.dir}"/>
	</target>

	<!-- Clean up -->
	<target name="clean" description="Clean up the derived files">
		<delete dir="${classes.dir}" />
		<!-- delete junit test output -->
		<delete>
			<fileset dir="${basedir}">
				<include name="TEST-*.txt" />
			</fileset>
		</delete>
	</target>

	<!-- Compile Java source, requesting extra info on deprecated methods -->
	<target name="build" depends="init">
		<mkdir dir="${classes.dir}" />
		<javac srcdir="${src.dir}" debug="on" destdir="${classes.dir}" 
			classpathref="project.classpath" includeantruntime="false">
			<exclude name="**/service/src/" />
			<compilerarg value="-Xlint:deprecation" />
		</javac>
	</target>

	<!-- simple deployment: copy WebContent file tree to webapps area -->
	<!-- also, clean up first -->
	<target name="deploy" depends="build, config-check-web">
		<delete dir="${deploy.dir}" />
		<copy todir="${deploy.dir}">
			<fileset dir="WebContent" />
		</copy>
	</target>
	
	<!--check that one of the above web config targets has been used -->
	<target name="config-check-web">
		<available file="${classes.dir}/META-INF/persistence.xml" property="configOK" />
		<available file="web.flag" property="webSetup" />
		<fail message="You need to run ant config-web-xxxdb" unless="configOK" />
		<fail message="You need to run ant config-web-xxxdb (not config-clientserver-xxxdb)" unless="webSetup" />
		<loadfile property="currentdb" srcFile="currentdb.txt" />
		<echo message="config-check-web: JPA is set up for web use with ${currentdb}" />
	</target>
	
	<target name="config-web-mysqldb" depends="build">
		<copy file="database/mysql/web-persistence.xml" tofile="${src.dir}/META-INF/persistence.xml" overwrite="true" />
		<copy file="database/mysql/web-persistence.xml" tofile="${classes.dir}/META-INF/persistence.xml" overwrite="true" />
		<delete file="clientserver.flag" />
		<echo file="currentdb.txt" message="mysqldb" />
		<touch file="web.flag" />
	</target>
	<!-- use the power of ant to edit a file, substitute username, pw 
		     to give us persistence.xml with current username, pw in it.
	 -->
	
	<target name="config-mysqldb">
		<echo message="configuring project for MySql, putting its persistence.xml on classpath"/>
		<echo message="replacing username with ${env.MYSQL_USER}, password with ${env.MYSQL_PW}"/>
		<!-- and copy persistence.xml to src/META-INF for use from eclipse 
	      (use project refresh, and set Properties>Java Persistence>Connection to None,
	      to avoid useless validation errors caused by case sensitivity problem)-->
		<filter token="username" value="${env.MYSQL_USER}" />
		<filter token="password" value="${env.MYSQL_PW}" />
		<filter token="mysql_url" value="${MYSQL_URL}" />
		<copy file="database/mysql/persistence.xml" todir="${src.dir}/META-INF" filtering="true" overwrite="true" />
		<copy file="database/mysql/persistence.xml" todir="${classes.dir}/META-INF" filtering="true" overwrite="true" />
	</target>

	<!--check that one of the above config targets has been used -->
	<target name="configCheck">
		<available file="${classes.dir}/META-INF/persistence.xml" property="configOK" />
		<fail message="No persistence.xml on classpath/META-INF. Use ant config-mysqldb" unless="configOK" />
		<echo message="configCheck: OK, found persistence.xml on classpath/META-INF"/>
	</target>
	<!-- Note that <formatter> element has no usefile="false" attribute here. 
		Because of this, the formatter writes program output to files,  avoiding
	    the display of all that JPA startup output for tests. Look for files TEST*
	    in the basedir. If a test fails, the formatter will still report that to the console.
	-->
	<!-- set up one target "testDAO" to run all DAO unit tests -->
	<target name="testDAO" depends="testDAO1" />
	<target name="testDAO1" depends="build, configCheck">
	    <echo message="testDAO1...look for details in TEST-*.txt"/>
		<junit fork="true" printsummary="yes">
		    <jvmarg value="${JAVAAGENT}"/>
			<formatter type="brief" />
			<test name="com.prefengine.userDAO" />
			<classpath refid="project.classpath" />
		</junit>
	</target>

	<!--Using JPA, we can configure for each database in persistence.xml, use
         one execution target for all databases-->
	<target name="sysTest" depends="build, configCheck">
		<java fork="true" classname="com.prefengine.presentation.SystemTest" failonerror="true">
			<classpath refid="project.classpath" />
			<jvmarg value="${JAVAAGENT}"/>
			<arg file="test.dat" />	
		</java>
	</target>

</project>
